// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("SHADOW_DATABASE_URL") // uses a direct connection
}

enum Role {
  USER
  SUPER_ADMIN
}

model User {
  id             String    @id @default(cuid())
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  role           Role      @default(USER)
  hashedPassword String?   @map("hashed_password")
  sessions       Session[]
  accounts       Account[]
  likedIds       String[]  @map("liked_ids")
  favoriteIds    String[]  @map("favorite_ids")
  noInterestIds  String[]  @map("no_interest_ids")

  LemonSqueezySubscription LemonSqueezySubscription[]

  plan         Plan?          @relation(fields: [planId], references: [id])
  planId       Int?           @map("plan_id")
  FeatureUsage FeatureUsage[]

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  oneTimePurchase OneTimePurchase[]

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model LemonSqueezyWebhookEvent {
  id              Int      @id @default(autoincrement())
  eventName       String   @map("event_name")
  processed       Boolean  @default(false)
  body            Json
  createdAt       DateTime @default(now()) @map("created_at")
  processingError String?  @map("processing_error")

  @@map("lemon_squeezy_webhook_event")
}

model LemonSqueezySubscription {
  id                                  Int       @id @default(autoincrement())
  lemonSqueezyId                      String    @unique @map("lemon_squeezy_id")
  orderId                             Int       @map("order_id")
  name                                String
  email                               String
  status                              String
  renewsAt                            DateTime? @map("renews_at")
  endsAt                              DateTime? @map("ends_at")
  trialEndsAt                         DateTime? @map("trial_ends_at")
  isUsageBased                        Boolean   @default(false) @map("is_usage_based")
  isPaused                            Boolean   @default(false) @map("is_paused")
  customerId                          String    @map("customer_id")
  variantId                           String    @map("variant_id")
  customerPortalUrl                   String?   @map("customer_portal_url")
  updatePaymentMethodUrl              String?   @map("update_payment_method_url")
  customerPortalUpdateSubscriptionUrl String?   @map("customer_portal_update_subscription_url")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("lemon_squeezy_subscription")
}

model OneTimePurchase {
  id             Int    @id @default(autoincrement())
  lemonSqueezyId String @unique @map("lemon_squeezy_id")
  orderId        Int    @map("order_id")
  name           String
  email          String
  status         String
  customerId     String @map("customer_id")
  variantId      String @map("variant_id")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("one_time_purchase")
}

model Plan {
  id                    Int    @id @default(autoincrement())
  lemonSqueezyVariantId String @unique @map("lemon_squeezy_variant_id")
  name                  String

  // Paywalled features, this is the number of credits the user can spend on each feature per month

  buttonClicks Int? @map("button_clicks")
  aiCalls      Int? @map("ai_calls")
  fileUploads  Int? @map("file_uploads")

  users User[] // This establishes the one-to-many relationship

  @@map("plan")
}

model FeatureUsage {
  id           String @id @default(cuid())
  userId       String @map("user_id")
  buttonClicks Int    @default(0) @map("button_clicks")
  aiCalls      Int    @default(0) @map("ai_calls")
  fileUploads  Int    @default(0) @map("file_uploads")

  // Add more features as needed
  date DateTime @default(now())
  user User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@map("feature_usage")
}

model Content {
  id         String   @id @default(cuid())
  title      String
  content    String
  category   String
  originHref String?  @map("origin_href")
  coverUrl   String?  @map("cover_url")
  tags       String[]
  favorites  Int      @default(0)
  likes      Int      @default(0)
  weekly     Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("content")
}

model Movie {
  id           String @id @default(cuid())
  title        String
  description  String
  videoUrl     String @map("video_url")
  thumbnailUrl String @map("thumbnail_url")
  genre        String
  duration     String
  favorites    Int    @default(0)
  likes        Int    @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("movie")
}

model Essay {
  id          String   @id @default(cuid())
  title       String
  description String?
  images      String[]
  videos      String[]
  voices      String[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("essay")
}
